from app.core.db.espresso_machines import EspressoMachinesDB
from app.core.types.espresso_machine import EspressoMachine


def check_espresso_machines() -> list[EspressoMachine]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–∫
    
    Returns:
        list[EspressoMachine]: –°–ø–∏—Å–æ–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω, —Ç—Ä–µ–±—É—é—â–∏—Ö –∑–∞–º–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–∫
    """
    db = EspressoMachinesDB()
    return db.get_machines_needing_gasket_replacement()


def format_notification_message(machines: list[EspressoMachine]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    Args:
        machines: –°–ø–∏—Å–æ–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω, —Ç—Ä–µ–±—É—é—â–∏—Ö –∑–∞–º–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–∫
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not machines:
        return ""
        
    message = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω–æ–∫-—É–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª–µ–π –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞—Ö:\n\n"
    
    for machine in machines:
        message += f"üìç {machine.location}\n"
        message += f"üìù –ú–æ–¥–µ–ª—å: {machine.model}\n"
        message += f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ–Ω–∞: {machine.last_gasket_replacement}\n"
        message += f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞: {machine.next_gasket_replacement}\n\n"
        
    return message 