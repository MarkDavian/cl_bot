from app.core.db.espresso_machines import EspressoMachinesDB
from datetime import datetime


def func_get_espresso_gasket_replacement_date() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–º–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–∫"""
    db = EspressoMachinesDB()
    machines = db.get_machines_needing_gasket_replacement()
    
    if not machines:
        return "‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ"
        
    message = "".join([
        f"üìç {machine.location}\n"
        f"üìù –ú–æ–¥–µ–ª—å: {machine.model}\n"
        f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ–Ω–∞: {machine.last_gasket_replacement}\n"
        f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞: {machine.next_gasket_replacement}\n\n"
        for machine in machines
    ])
    
    return message


def func_get_espresso_health_bar() -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–¥–æ—Ä–æ–≤—å—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω"""
    db = EspressoMachinesDB()
    machines = db.get_all_machines()
    
    if not machines:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞—Ö"
        
    total_health = 0
    for machine in machines:
        if not machine.next_gasket_replacement:
            continue
            
        next_date = datetime.strptime(machine.next_gasket_replacement, "%d.%m.%Y")
        current_date = datetime.now()
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã —É–∂–µ –ø—Ä–æ—à–ª–∞
        if current_date >= next_date:
            total_health += 0
            continue
            
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è (180 –¥–Ω–µ–π = 100%)
        days_left = (next_date - current_date).days
        health_percentage = min(100, max(0, (days_left / 180) * 100))
        total_health += health_percentage
    
    # –°—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –º–∞—à–∏–Ω
    avg_health = total_health / len(machines)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (20 —Å–∏–º–≤–æ–ª–æ–≤)
    bar_length = 20
    filled_length = int(bar_length * avg_health / 100)
    bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
    
    return f"{bar}\n{avg_health:.1f}%" 