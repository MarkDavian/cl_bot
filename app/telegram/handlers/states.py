"""
Модуль состояний для конечных автоматов Telegram-бота.

Этот модуль определяет классы состояний (StatesGroup) для управления
диалогами пользователя с ботом. Каждый класс представляет определенный
сценарий взаимодействия, а вложенные состояния (State) соответствуют
шагам этого сценария.
"""

from aiogram.dispatcher.filters.state import StatesGroup, State

from app.core.types.espresso_machine import ServiceDate


class CLTestsAddTestSG(StatesGroup):
    """
    Группа состояний для добавления нового теста.
    
    Определяет последовательность шагов при добавлении результата
    тестирования сотрудника.
    """
    Date = State()  # Состояние ввода даты теста
    Type = State()  # Состояние выбора типа теста
    Time = State()  # Состояние ввода времени теста
    Score = State()  # Состояние ввода количества баллов
    Rank = State()  # Состояние ввода ранга/оценки


class CLTestsSG(StatesGroup):
    """
    Группа состояний для управления тестами сотрудников.
    
    Определяет основные операции с тестами: просмотр, добавление,
    удаление и просмотр подробностей.
    """
    Menu = State()      # Главное меню управления тестами
    Choose = State()    # Выбор конкретного теста
    Add = CLTestsAddTestSG()  # Подгруппа состояний для добавления теста
    Del = State()       # Удаление теста
    Details = State()   # Просмотр подробностей о тесте


class AddEspressoSG(StatesGroup):
    """
    Группа состояний для добавления новой кофемашины.
    
    Определяет последовательность шагов при добавлении информации
    о новой кофемашине в систему.
    """
    Location = State()           # Местоположение кофемашины
    Model = State()              # Модель кофемашины
    ServiceDate = State()        # Дата обслуживания
    ServiceDescription = State() # Описание обслуживания
    GasketDate = State()         # Дата замены прокладки
    GasketDescription = State()  # Описание замены прокладки
    NextGasketDate = State()     # Дата следующей замены прокладки
    NextGasketDescription = State() # Описание следующей замены


class UpdateEspressoSG(StatesGroup):
    """
    Группа состояний для обновления информации о кофемашине.
    
    В настоящее время содержит только состояние для обновления
    даты замены прокладки.
    """
    GasketDate = State()  # Обновление даты замены прокладки


class EspressoSG(StatesGroup):
    """
    Группа состояний для управления кофемашинами.
    
    Определяет основные операции с кофемашинами: добавление, обновление,
    удаление и просмотр информации.
    """
    Menu = State()               # Главное меню управления кофемашинами
    Add = AddEspressoSG()        # Подгруппа состояний для добавления кофемашины
    Update = UpdateEspressoSG()  # Подгруппа состояний для обновления информации
    Del = State()                # Удаление кофемашины
    Details = State()            # Просмотр подробностей о кофемашине
    ServiceHistory = State()     # История обслуживания
    ServiceDetails = State()     # Подробности об обслуживании


class EmployeesSG(StatesGroup):
    """
    Группа состояний для управления сотрудниками.
    
    Определяет операции с данными сотрудников: выбор, изменение
    различных параметров и атрибутов.
    """
    Employee = State()           # Выбор сотрудника
    Choose = State()             # Выбор действия с сотрудником
    Change = State()             # Изменение данных сотрудника
    Change_name = State()        # Изменение имени
    Change_birthday = State()    # Изменение даты рождения
    Change_workstarted = State() # Изменение даты начала работы
    Change_lmk = State()         # Изменение ЛМК
    Change_cert_base = State()   # Изменение базового сертификата
    Change_cert_profi = State()  # Изменение профессионального сертификата
    Certificates_menu = State()
    Certificates_delete = State()
    Delete = State()
    CLTests = CLTestsSG()
    Espresso = EspressoSG()
    
class StartSG(StatesGroup):
    """
    Группа состояний для начального меню бота.
    
    Определяет состояния для стартового взаимодействия
    и базовых операций с датами.
    """
    start = State()       # Начальное состояние
    dates_diff = State()  # Расчет разницы между датами
    days_for = State()    # Определение количества дней до даты


class AddSG(StatesGroup):
    """
    Группа состояний для добавления нового сотрудника.
    
    Определяет последовательность шагов при добавлении
    информации о новом сотруднике.
    """
    start = State()       # Начало процесса добавления
    birthday = State()    # Ввод даты рождения
    workstarted = State() # Ввод даты начала работы
    lmk = State()         # Ввод информации о ЛМК
    end = State()         # Завершение процесса добавления


class CurSG(StatesGroup):
    """
    Группа состояний для работы с текущими сотрудниками.
    
    Используется для выбора конкретного сотрудника
    и работы с его данными.
    """
    Choose = State()    # Выбор сотрудника
    Employee = State()  # Работа с выбранным сотрудником


class PlanB(StatesGroup):
    """
    Группа состояний для резервного сценария.
    
    Используется как запасной вариант при ошибках
    или нестандартных ситуациях.
    """
    wait = State()  # Состояние ожидания ввода


class MenuSG(StatesGroup):
    """
    Группа состояний для главного меню бота.
    
    Определяет основное меню, с которого пользователь
    может перейти к различным функциям бота.
    """
    Menu = State()  # Главное меню


class EspressoSG(StatesGroup):
    """
    Группа состояний для работы с кофемашинами.
    
    Дублирует частично функциональность основного класса
    EspressoSG, но с упрощенным набором состояний.
    """
    Menu = State()             # Меню управления кофемашинами
    Espresso_gasket = State()  # Управление прокладками кофемашин