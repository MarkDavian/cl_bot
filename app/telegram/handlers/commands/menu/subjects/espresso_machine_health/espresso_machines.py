import uuid
import asyncio
from bson import ObjectId
from datetime import datetime

from typing import Dict, Any, Optional

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from app.telegram.handlers.states import EmployeesSG
from app.core.types.espresso_machine import EspressoMachine 
from app.core.db.espresso_machines import EspressoMachinesDB
from app.core.funcs.correct_date import date_incorrect

from app.telegram.handlers.commands.menu.common import MenuCallbackData
from .common import EspressoCallbackData


class AsyncCallbackStore:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö callback.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ get, set, update, delete –∏ delete_all.
    –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """
    def __init__(self):
        self._store: Dict[str, Dict[str, Any]] = {}
        self._lock = asyncio.Lock()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    
    async def get(self, key: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        async with self._lock:
            return self._store.get(key, None)
    
    async def set(self, key: str, value: Dict[str, Any]) -> str:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            value: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª—é—á–µ–π)
        """
        async with self._lock:
            self._store[key] = value
            return key
    
    async def update(self, key: str, value: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            value: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        async with self._lock:
            if key in self._store:
                self._store[key].update(value)
                return True
            return False
    
    async def delete(self, key: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        async with self._lock:
            if key in self._store:
                del self._store[key]
                return True
            return False
    
    async def delete_all(self) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """
        async with self._lock:
            count = len(self._store)
            self._store.clear()
            return count
    
    async def __len__(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        async with self._lock:
            return len(self._store)
    
    async def contains(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        async with self._lock:
            return key in self._store

    @classmethod
    def _get_random_key(cls, size: int = 8) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        return str(uuid.uuid4())[:size]    


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
CALLBACK_STORE = AsyncCallbackStore()


async def show_machines(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.Espresso.Menu.state)
    
    with EspressoMachinesDB() as db:
        machines = db.get_all_machines()
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã
    keyboard.add(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É",
        callback_data=EspressoCallbackData(
            action="add_machine"
        ).pack()
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
    for machine in machines:
        key = CALLBACK_STORE._get_random_key()
        await CALLBACK_STORE.set(key, {"machine_id": machine.id})
        keyboard.add(types.InlineKeyboardButton(
            f"{machine.location}",
            callback_data=EspressoCallbackData(
                action="view_machine",
                key=key
            ).pack()
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.add(types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=MenuCallbackData(action="espresso_health").hash()
    ))
    
    await callback.message.edit_text(
        "‚òïÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞–º–∏\n\n"
        f"–í—Å–µ–≥–æ –º–∞—à–∏–Ω: {len(machines)}",
        reply_markup=keyboard
    )

async def view_machine(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.Espresso.Details.state)
    
    callback_data = EspressoCallbackData.unpack(callback.data)
    key = callback_data.key
    
    data = await CALLBACK_STORE.get(key)
    if not data:
        await callback.message.edit_text("–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    machine_id = data["machine_id"]
    
    with EspressoMachinesDB() as db:
        machine = db.get_machine(machine_id)
    
    if not machine:
        await callback.message.edit_text("–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –º–∞—à–∏–Ω–æ–π
    keyboard.row(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        callback_data=EspressoCallbackData(
            action="add_service",
            key=key
        ).pack()),
        types.InlineKeyboardButton(
        "–ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
        callback_data=EspressoCallbackData(
            action="history_service",
            key=key
        ).pack()
    ))
    
    keyboard.add(types.InlineKeyboardButton(
        "–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ–Ω—É —Ä–µ–∑–∏–Ω–æ–∫",
        callback_data=EspressoCallbackData(
            action="update_gasket",
            key=key
        ).pack()
    ))
    
    keyboard.add(types.InlineKeyboardButton(
        "–£–¥–∞–ª–∏—Ç—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É",
        callback_data=EspressoCallbackData(
            action="delete_machine",
            key=key
        ).pack()
    ))
    
    keyboard.add(types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
        callback_data=EspressoCallbackData(
            action="back_to_list",
            key=key
        ).pack()
    ))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—à–∏–Ω–µ
    text = (
        f"‚òïÔ∏è –ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ {machine.model}\n"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {machine.location}\n\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω–æ–∫: {machine.last_gasket_replacement}\n"
        f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω–æ–∫: {machine.next_gasket_replacement}\n\n"
        "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:\n"
    )
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    sorted_service_dates = sorted(machine.service_dates, 
                                 key=lambda x: datetime.strptime(x.date, '%d.%m.%Y'))
    if len(sorted_service_dates) > 3:
        old_dates = sorted_service_dates[:-3]
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–∞—Ç—ã
        sorted_service_dates = sorted_service_dates[-3:]
        text += f"–ò –µ—â–µ {len(old_dates)} –∑–∞–ø–∏—Å–µ–π...\n"

    for service in sorted_service_dates:
        text += f"- {service.date}: {service.description}\n"
    
    await callback.message.edit_text(text, reply_markup=keyboard)


async def add_machine_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.Espresso.Add.Location)

    callback_data = EspressoCallbackData.unpack(callback.data)
    key = callback_data.key
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
        callback_data=EspressoCallbackData(
            action="cancel_add",
            key=key
        ).pack()
    ))
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã (—Ñ–∏–ª–∏, –ø—Ä–µ—Å–Ω—è, –ø—Ä—É–¥, —Å–æ–∫–æ):",
        reply_markup=keyboard
    )


async def add_machine_location(message: types.Message, state: FSMContext):
    location = message.text.lower()
    if location not in ["—Ñ–∏–ª–∏", "–ø—Ä–µ—Å–Ω—è", "–ø—Ä—É–¥", "—Å–æ–∫–æ"]:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ñ–∏–ª–∏, –ø—Ä–µ—Å–Ω—è, –ø—Ä—É–¥ –∏–ª–∏ —Å–æ–∫–æ"
        )
        return
    
    await state.update_data(location=location)
    
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã:"
    )
    await state.set_state(EmployeesSG.Espresso.Add.Model)


async def add_machine_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É
    new_machine = EspressoMachine(
        id=str(ObjectId()),
        location=data["location"],
        model=data["model"],
        service_dates=[],
        last_gasket_replacement="",
        next_gasket_replacement=""
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—à–∏–Ω—É –≤ –±–∞–∑—É
    with EspressoMachinesDB() as db:
        db.add(new_machine)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞—à–∏–Ω
    await state.set_state(EmployeesSG.Espresso.Menu.state)
    
    with EspressoMachinesDB() as db:
        machines = db.get_all_machines()
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É",
        callback_data=EspressoCallbackData(
            action="add_machine"
        ).pack()
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
    for machine in machines:
        key = CALLBACK_STORE._get_random_key()
        await CALLBACK_STORE.set(key, {"machine_id": machine.id})
        keyboard.add(types.InlineKeyboardButton(
            f"{machine.location}",
            callback_data=EspressoCallbackData(
                action="view_machine",
                key=key
            ).pack()
        ))
    
    keyboard.add(types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back"
    ))
    
    await message.reply(
        f"‚úÖ –ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"‚òïÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞–º–∏\n\n"
        f"–í—Å–µ–≥–æ –º–∞—à–∏–Ω: {len(machines)}",
        reply_markup=keyboard
    )


async def add_service_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.Espresso.Add.ServiceDate)
    
    callback_data = EspressoCallbackData.unpack(callback.data)
    key = callback_data.key

    data = await CALLBACK_STORE.get(key)
    machine_id = data["machine_id"]
    
    await state.update_data(machine_id=machine_id, key=key)
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
        callback_data=EspressoCallbackData(
            action="cancel_add",
            key=key
        ).pack()
    ))
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=keyboard
    )


async def add_service_date(message: types.Message, state: FSMContext):
    if date_incorrect(message.text):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
        )
        return
    
    await state.update_data(service_date=message.text)
    
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:"
    )
    await state.set_state(EmployeesSG.Espresso.Add.ServiceDescription)


async def add_service_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    key = data['key']

    with EspressoMachinesDB() as db:
        machine = db.get_machine(data["machine_id"])
    
    if not machine:
        await message.reply("–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    machine.add_service_date(
        date=data["service_date"], 
        description=message.text,
        authorized=message.from_user.id
    )
    with EspressoMachinesDB() as db:
        db.update_machine(machine)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–∞—à–∏–Ω—ã
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ",
        callback_data=EspressoCallbackData(
            action="view_machine",
            key=key
        ).pack()
    ))
    await message.reply(
        "‚úÖ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
        reply_markup=keyboard
    )


async def update_gasket_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.Espresso.Update.GasketDate)
    
    callback_data = EspressoCallbackData.unpack(callback.data)
    key = callback_data.key
    data = await CALLBACK_STORE.get(key)
    machine_id = data["machine_id"]

    await state.update_data(machine_id=machine_id, key=key)
    
    cancel_keyboard = types.InlineKeyboardMarkup(row_width=1)
    cancel_keyboard.add(types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
        callback_data=EspressoCallbackData(
            action="cancel_update",
            key=key
        ).pack()
    ))
    now_date = datetime.now().strftime("%d.%m.%Y")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(now_date))

    await callback.message.edit_text(
        "–û–±–Ω–æ–≤–∏–º –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–∫",
        reply_markup=cancel_keyboard
    )

    await callback.message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=keyboard
    )

async def update_gasket_date(message: types.Message, state: FSMContext):
    if date_incorrect(message.text):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
        )
        return
    
    data = await state.get_data()
    with EspressoMachinesDB() as db:
        machine = db.get_machine(data["machine_id"])
    
    if not machine:
        await message.reply("–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–∫
    machine.update_gasket_replacement(message.text)
    with EspressoMachinesDB() as db:
        db.update_machine(machine)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–∞—à–∏–Ω—ã
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è",
        callback_data=EspressoCallbackData(
            action="view_machine",
            key=data["key"]
        ).pack()
    ))
    await message.reply(
        "‚úÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.reply(
        f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ ({machine.location})?",
        reply_markup=keyboard
    )

async def delete_machine_confirm(callback: types.CallbackQuery, state: FSMContext):
    callback_data = EspressoCallbackData.unpack(callback.data)
    data = await CALLBACK_STORE.get(callback_data.key)
    machine_id = data["machine_id"]
    key = callback_data.key

    with EspressoMachinesDB() as db:
        machine = db.get_machine(machine_id)
    
    if not machine:
        await callback.message.edit_text("–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–î–∞, —É–¥–∞–ª–∏—Ç—å",
        callback_data=EspressoCallbackData(
            action="confirm_delete",
            key=key
        ).pack()
    ))
    keyboard.add(types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
        callback_data=EspressoCallbackData(
            action="view_machine",
            key=key
        ).pack()
    ))
    
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É {machine.model} –≤ {machine.location}?",
        reply_markup=keyboard
    )


async def delete_machine_execute(callback: types.CallbackQuery, state: FSMContext):
    callback_data = EspressoCallbackData.unpack(callback.data)
    key = callback_data.key
    data = await CALLBACK_STORE.get(key)
    machine_id = data["machine_id"]

    with EspressoMachinesDB() as db:
        db.delete_machine(machine_id)

    await CALLBACK_STORE.delete(key)
    
    await callback.message.edit_text("‚úÖ –ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∞")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞—à–∏–Ω
    await show_machines(callback, state)


async def cancel_add(callback: types.CallbackQuery, state: FSMContext):
    await show_machines(callback, state)


async def cancel_update(callback: types.CallbackQuery, state: FSMContext):
    await view_machine(callback, state)


async def view_service_history(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.Espresso.ServiceHistory.state)
    
    callback_data = EspressoCallbackData.unpack(callback.data)
    key = callback_data.key
    data = await CALLBACK_STORE.get(key)
    
    if not data:
        await callback.message.edit_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
        
    machine_id = data["machine_id"]
    
    # Get page from callback_data, default to 1
    page = int(getattr(callback_data, 'page', 1))
    
    with EspressoMachinesDB() as db:
        machine = db.get_machine(machine_id)
    
    if not machine or not machine.service_dates:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=EspressoCallbackData(
                action="view_machine",
                key=key
            ).pack()
        ))
        
        await callback.message.edit_text(
            "‚òïÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n\n"
            "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã.",
            reply_markup=keyboard
        )
        return
    
    # Sort service dates by date (newest first)
    sorted_service_dates = sorted(
        machine.service_dates, 
        key=lambda x: datetime.strptime(x.date, '%d.%m.%Y'),
        reverse=True
    )
    
    # Calculate pagination
    items_per_page = 5
    total_pages = (len(sorted_service_dates) + items_per_page - 1) // items_per_page
    
    # Adjust page if out of bounds
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages
    
    # Get current page items
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    current_page_items = sorted_service_dates[start_idx:end_idx]
    
    # Create keyboard with service date buttons
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    for service in current_page_items:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        service_key = CALLBACK_STORE._get_random_key()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ –∏ —Å–µ—Ä–≤–∏—Å–µ
        await CALLBACK_STORE.set(service_key, {
            "machine_id": machine_id,
            "service_id": service._id
        })
        
        keyboard.add(types.InlineKeyboardButton(
            f"üìÖ {service.date}",
            callback_data=EspressoCallbackData(
                action="view_service_details",
                key=service_key,
                page=page
            ).pack()
        ))
    
    # Add pagination controls
    navigation_buttons = []
    
    if page > 1:
        # –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ç –∂–µ –∫–ª—é—á –º–∞—à–∏–Ω—ã, –Ω–æ –º–µ–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        navigation_buttons.append(types.InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=EspressoCallbackData(
                action="history_service",
                key=key,
                page=page-1
            ).pack()
        ))
    
    if page < total_pages:
        navigation_buttons.append(types.InlineKeyboardButton(
            "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
            callback_data=EspressoCallbackData(
                action="history_service",
                key=key,
                page=page+1
            ).pack()
        ))
    
    if navigation_buttons:
        keyboard.row(*navigation_buttons)
    
    # Add back button
    keyboard.add(types.InlineKeyboardButton(
        "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ",
        callback_data=EspressoCallbackData(
            action="view_machine",
            key=key
        ).pack()
    ))
    
    await callback.message.edit_text(
        f"‚òïÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è {machine.model} ({machine.location})\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}",
        reply_markup=keyboard
    )


async def view_service_details(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.Espresso.ServiceDetails.state)
    
    callback_data = EspressoCallbackData.unpack(callback.data)
    key = callback_data.key
    data = await CALLBACK_STORE.get(key)
    
    if not data:
        await callback.message.edit_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    machine_id = data["machine_id"]
    service_id = data["service_id"]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Ç–æ–ª—å–∫–æ –æ –º–∞—à–∏–Ω–µ
    back_key = CALLBACK_STORE._get_random_key()
    await CALLBACK_STORE.set(back_key, {"machine_id": machine_id})
    
    with EspressoMachinesDB() as db:
        machine = db.get_machine(machine_id)
    
    if not machine:
        await callback.message.edit_text("–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Find the service by ID
    service = next((s for s in machine.service_dates if s._id == service_id), None)
    
    if not service:
        await callback.message.edit_text("–ó–∞–ø–∏—Å—å –æ–± –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Create keyboard with back button
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
        callback_data=EspressoCallbackData(
            action="history_service",
            key=back_key,
            page=callback_data.page
        ).pack()
    ))
    
    # Format service details
    text = (
        f"üìù –î–µ—Ç–∞–ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã {machine.model}\n\n"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {machine.location}\n"
        f"üìÖ –î–∞—Ç–∞: {service.date}\n"
        f"üîç –û–ø–∏—Å–∞–Ω–∏–µ: {service.description}\n"
    )
    
    if service.authorized:
        text += f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª: {service.authorized}\n"
        text += f"üë§ –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏: /whois{service.authorized}\n"

    text += f"üÜî –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {service._id}"
    
    await callback.message.edit_text(text, reply_markup=keyboard)


def reg_espresso_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω
    dp.register_callback_query_handler(
        show_machines,
        lambda c: (c.data.startswith(EspressoCallbackData.prefix) and 
                  EspressoCallbackData.unpack(c.data).action == "show_machines") or 
                 (c.data.startswith(EspressoCallbackData.prefix) and 
                  EspressoCallbackData.unpack(c.data).action == "back_to_list"),
        state='*'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –º–∞—à–∏–Ω—ã
    dp.register_callback_query_handler(
        view_machine,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "view_machine",
        state='*'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
    dp.register_callback_query_handler(
        add_machine_start,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "add_machine",
        state=EmployeesSG.Espresso.Menu.state
    )
    
    dp.register_message_handler(
        add_machine_location,
        state=EmployeesSG.Espresso.Add.Location.state
    )
    
    dp.register_message_handler(
        add_machine_model,
        state=EmployeesSG.Espresso.Add.Model.state
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    dp.register_callback_query_handler(
        add_service_start,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "add_service",
        state='*'
    )
    
    dp.register_message_handler(
        add_service_date,
        state=EmployeesSG.Espresso.Add.ServiceDate.state
    )
    
    dp.register_message_handler(
        add_service_description,
        state=EmployeesSG.Espresso.Add.ServiceDescription.state
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã —Ä–µ–∑–∏–Ω–æ–∫
    dp.register_callback_query_handler(
        update_gasket_start,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "update_gasket",
        state='*'
    )
    
    dp.register_message_handler(
        update_gasket_date,
        state=EmployeesSG.Espresso.Update.GasketDate.state
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
    dp.register_callback_query_handler(
        delete_machine_confirm,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "delete_machine",
        state='*'
    )
    
    dp.register_callback_query_handler(
        delete_machine_execute,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "confirm_delete",
        state='*'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    dp.register_callback_query_handler(
        cancel_add,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "cancel_add",
        state='*'
    )
    
    dp.register_callback_query_handler(
        cancel_update,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "cancel_update",
        state='*'
    ) 
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    dp.register_callback_query_handler(
        view_service_history,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "history_service",
        state='*'
    )
    
    dp.register_callback_query_handler(
        view_service_details,
        lambda c: c.data.startswith(EspressoCallbackData.prefix) and 
                 EspressoCallbackData.unpack(c.data).action == "view_service_details",
        state='*'
    )