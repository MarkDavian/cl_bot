import os
from datetime import datetime

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text


from app.telegram.handlers.states import EmployeesSG
from app.core.types import EmployeeBuilder
from app.core.funcs.get_employees import func_get_employees, func_get_by_id
from app.core.funcs.correct_date import date_incorrect
from app.core.funcs.add_employee import func_add_employee
from app.core.funcs.del_employee import func_del_emp
from ...common import EmpCallbackData, CLTestsCallbackData


async def emp_cl_tests(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.CLTests.Menu.state)
    
    data = await state.get_data()
    employee = data.get('employee')
    employee = EmployeeBuilder(**employee).get_employee()
    
    current_page = 0
    if callback.data.startswith(CLTestsCallbackData.prefix):
        current_page = CLTestsCallbackData.unpack(callback.data).page
        if not current_page:
            current_page = 0

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 4 —à—Ç—É–∫–∏
    tests_per_page = 4
    total_pages = (len(employee.test_results) + tests_per_page - 1) // tests_per_page
    start_idx = int(current_page) * tests_per_page
    end_idx = min(start_idx + tests_per_page, len(employee.test_results))
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)

    keyboard.add(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç",
        callback_data=CLTestsCallbackData(
            action="add_test",
            test_id="",
            page=current_page
        ).pack()
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for test in employee.test_results[start_idx:end_idx]:
        keyboard.add(types.InlineKeyboardButton(
            f"{test.date} - {test.type}",
            callback_data=CLTestsCallbackData(
                action="view_test",
                test_id=test._id,
                page=current_page
            ).pack()
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    nav_buttons = []
    if total_pages > 1:
        if int(current_page) > 0:
            nav_buttons.append(types.InlineKeyboardButton(
                "‚¨ÖÔ∏è",
                callback_data=CLTestsCallbackData(
                    action="change_page",
                    test_id="",
                    page=int(current_page) - 1
                ).pack()
            ))
        if int(current_page) < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton(
                "‚û°Ô∏è",
                callback_data=CLTestsCallbackData(
                    action="change_page",
                    test_id="",
                    page=int(current_page) + 1
                ).pack()
            ))
        if nav_buttons:
            keyboard.row(*nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.add(types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥",
        callback_data=f'back:{employee.id}'
    ))
    
    await callback.message.edit_text(
        f'üìä –°—Ä–µ–∑—ã –∑–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.name}:\n'
        f'–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(employee.test_results)}\n'
        f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {int(current_page) + 1} –∏–∑ {total_pages}',
        reply_markup=keyboard
    )


async def view_test_details(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.CLTests.Details.state)
    
    callback_data = CLTestsCallbackData.unpack(callback.data)
    data = await state.get_data()
    employee = data.get('employee')
    employee = EmployeeBuilder(**employee).get_employee()
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ç–µ—Å—Ç
    test = next((t for t in employee.test_results if t._id == callback_data.test_id), None)
    
    if not test:
        await callback.message.edit_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤",
        callback_data=CLTestsCallbackData(
            action="back_to_tests",
            test_id="",
            page=callback_data.page
        ).pack()
    ))
    
    await callback.message.edit_text(
        f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –æ—Ç {test.date}\n\n'
        f'‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {test.completion_time}\n'
        f'üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {test.score}\n'
        f'üèÜ –ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {test.rank}',
        reply_markup=keyboard
    )


async def back_to_tests(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.CLTests.Menu.state)
    
    callback_data = CLTestsCallbackData.unpack(callback.data)
    data = await state.get_data()
    employee = data.get('employee')
    employee = EmployeeBuilder(**employee).get_employee()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 4 —à—Ç—É–∫–∏
    tests_per_page = 4
    total_pages = (len(employee.test_results) + tests_per_page - 1) // tests_per_page
    start_idx = int(callback_data.page) * tests_per_page
    end_idx = min(start_idx + tests_per_page, len(employee.test_results))
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)

    keyboard.add(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç",
        callback_data=CLTestsCallbackData(
            action="add_test",
            test_id="",
            page=callback_data.page
        ).pack()
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for test in employee.test_results[start_idx:end_idx]:
        keyboard.add(types.InlineKeyboardButton(
            f"{test.date} - {test.type}",
            callback_data=CLTestsCallbackData(
                action="view_test",
                test_id=test._id,
                page=callback_data.page
            ).pack()
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    nav_buttons = []
    if total_pages > 1:
        if int(callback_data.page) > 0:
            nav_buttons.append(types.InlineKeyboardButton(
                "‚¨ÖÔ∏è",
                callback_data=CLTestsCallbackData(
                    action="change_page",
                    test_id="",
                    page=int(callback_data.page) - 1
                ).pack()
            ))
        if int(callback_data.page) < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton(
                "‚û°Ô∏è",
                callback_data=CLTestsCallbackData(
                    action="change_page",
                    test_id="",
                    page=int(callback_data.page) + 1
                ).pack()
            ))
        if nav_buttons:
            keyboard.row(*nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.add(types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥",
        callback_data=f'back:{employee.id}'
    ))
    
    await callback.message.edit_text(
        f'üìä –°—Ä–µ–∑—ã –∑–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.name}:\n'
        f'–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(employee.test_results)}\n'
        f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {int(callback_data.page) + 1} –∏–∑ {total_pages}',
        reply_markup=keyboard
    )

# —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ Menu
async def add_test_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.CLTests.Add.Date)
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∞",
        callback_data=CLTestsCallbackData(
            action="cancel_add",
            test_id="",
            page=0
        ).pack()
    ))
    
    await callback.message.edit_text(
        "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=keyboard
    )

# —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ add.date
async def add_test_date(message: types.Message, state: FSMContext):
    if date_incorrect(message.text):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
        )
        return
    
    await state.update_data(test_date=message.text)
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∞",
        callback_data=CLTestsCallbackData(
            action="cancel_add",
            test_id="",
            page=0
        ).pack()
    ))
    
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:",
        reply_markup=keyboard
    )

    await state.set_state(EmployeesSG.CLTests.Add.Type)

# —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ add.type
async def add_test_type(message: types.Message, state: FSMContext):
    await state.update_data(test_type=message.text)
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∞",
        callback_data=CLTestsCallbackData(
            action="cancel_add",
            test_id="",
            page=0
        ).pack()
    ))
    
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:",
        reply_markup=keyboard
    )
    await state.set_state(EmployeesSG.CLTests.Add.Time)

# —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ add.time
async def add_test_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01:30"
        )
        return
    
    await state.update_data(completion_time=message.text)
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∞",
        callback_data=CLTestsCallbackData(
            action="cancel_add",
            test_id="",
            page=0
        ).pack()
    ))
    
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤:",
        reply_markup=keyboard
    )
    await state.set_state(EmployeesSG.CLTests.Add.Score)
# —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ add.score
async def add_test_score(message: types.Message, state: FSMContext):
    try:
        score = int(message.text)
        if score < 0:
            raise ValueError
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
        )
        return
    
    await state.update_data(score=score)
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∞",
        callback_data=CLTestsCallbackData(
            action="cancel_add",
            test_id="",
            page=0
        ).pack()
    ))
    
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ:",
        reply_markup=keyboard
    )
    await state.set_state(EmployeesSG.CLTests.Add.Rank)
# —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ add.rank
async def add_test_rank(message: types.Message, state: FSMContext):
    try:
        rank = int(message.text)
        if rank < 1:
            raise ValueError
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
        )
        return
    
    data = await state.get_data()
    employee = data.get('employee')
    employee = EmployeeBuilder(**employee).get_employee()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
    from app.core.types import TestResult
    new_test = TestResult(
        date=data['test_date'],
        type=data['test_type'],
        completion_time=data['completion_time'],
        score=data['score'],
        rank=rank
    )
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    employee.add_test_result(new_test)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    await state.reset_data()
    await state.set_data({'employee': employee.__dict__()})

    func_del_emp(employee.id)
    func_add_employee(**employee.__dict__())

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤
    await state.set_state(EmployeesSG.CLTests.Menu.state)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 4 —à—Ç—É–∫–∏
    tests_per_page = 4
    total_pages = (len(employee.test_results) + tests_per_page - 1) // tests_per_page
    current_page = total_pages - 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç",
        callback_data=CLTestsCallbackData(
            action="add_test",
            test_id="",
            page=current_page
        ).pack()
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * tests_per_page
    end_idx = min(start_idx + tests_per_page, len(employee.test_results))
    
    for test in employee.test_results[start_idx:end_idx]:
        keyboard.add(types.InlineKeyboardButton(
            f"{test.date} - {test.type}",
            callback_data=CLTestsCallbackData(
                action="view_test",
                test_id=test._id,
                page=current_page
            ).pack()
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    nav_buttons = []
    if total_pages > 1:
        if current_page > 0:
            nav_buttons.append(types.InlineKeyboardButton(
                "‚¨ÖÔ∏è",
                callback_data=CLTestsCallbackData(
                    action="change_page",
                    test_id="",
                    page=current_page - 1
                ).pack()
            ))
        if current_page < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton(
                "‚û°Ô∏è",
                callback_data=CLTestsCallbackData(
                    action="change_page",
                    test_id="",
                    page=current_page + 1
                ).pack()
            ))
        if nav_buttons:
            keyboard.row(*nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.add(types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥",
        callback_data=employee.id
    ))
    
    await message.reply(
        f'‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n'
        f'üìä –°—Ä–µ–∑—ã –∑–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.name}:\n'
        f'–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(employee.test_results)}\n'
        f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}',
        reply_markup=keyboard
    )

    await state.set_state(EmployeesSG.CLTests.Menu.state)


async def cancel_add_test(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EmployeesSG.CLTests.Menu.state)
    
    data = await state.get_data()
    employee = data.get('employee')
    employee = EmployeeBuilder(**employee).get_employee()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 4 —à—Ç—É–∫–∏
    tests_per_page = 4
    total_pages = (len(employee.test_results) + tests_per_page - 1) // tests_per_page
    current_page = 0
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç",
        callback_data=CLTestsCallbackData(
            action="add_test",
            test_id="",
            page=current_page
        ).pack()
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * tests_per_page
    end_idx = min(start_idx + tests_per_page, len(employee.test_results))
    
    for test in employee.test_results[start_idx:end_idx]:
        keyboard.add(types.InlineKeyboardButton(
            f"{test.date} - {test.type}",
            callback_data=CLTestsCallbackData(
                action="view_test",
                test_id=test._id,
                page=current_page
            ).pack()
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    nav_buttons = []
    if total_pages > 1:
        if current_page > 0:
            nav_buttons.append(types.InlineKeyboardButton(
                "‚¨ÖÔ∏è",
                callback_data=CLTestsCallbackData(
                    action="change_page",
                    test_id="",
                    page=current_page - 1
                ).pack()
            ))
        if current_page < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton(
                "‚û°Ô∏è",
                callback_data=CLTestsCallbackData(
                    action="change_page",
                    test_id="",
                    page=current_page + 1
                ).pack()
            ))
        if nav_buttons:
            keyboard.row(*nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.add(types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥",
        callback_data=employee.id
    ))
    
    await callback.message.edit_text(
        f'üìä –°—Ä–µ–∑—ã –∑–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.name}:\n'
        f'–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(employee.test_results)}\n'
        f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}',
        reply_markup=keyboard
    )


def reg_cl_tests_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    dp.register_callback_query_handler(
        emp_cl_tests,
        lambda c: c.data and (not c.data.startswith(CLTestsCallbackData.prefix) or 
                            CLTestsCallbackData.unpack(c.data).action == "change_page"),
        state=EmployeesSG.CLTests.Menu.state
    )
    
    dp.register_callback_query_handler(
        view_test_details,
        lambda c: c.data and CLTestsCallbackData.unpack(c.data).action == "view_test",
        state=EmployeesSG.CLTests.Menu.state
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    dp.register_callback_query_handler(
        add_test_start,
        lambda c: c.data and CLTestsCallbackData.unpack(c.data).action == "add_test",
        state=EmployeesSG.CLTests.Menu.state
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤
    dp.register_callback_query_handler(
        back_to_tests,
        lambda c: c.data and CLTestsCallbackData.unpack(c.data).action == "back_to_tests",
        state=EmployeesSG.CLTests.Details.state
    )
    
    dp.register_message_handler(
        add_test_date,
        state=EmployeesSG.CLTests.Add.Date.state
    )
    
    dp.register_message_handler(
        add_test_type,
        state=EmployeesSG.CLTests.Add.Type.state
    )
    
    dp.register_message_handler(
        add_test_time,
        state=EmployeesSG.CLTests.Add.Time.state
    )
    
    dp.register_message_handler(
        add_test_score,
        state=EmployeesSG.CLTests.Add.Score.state
    )
    
    dp.register_message_handler(
        add_test_rank,
        state=EmployeesSG.CLTests.Add.Rank.state
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    dp.register_callback_query_handler(
        cancel_add_test,
        lambda c: c.data and CLTestsCallbackData.unpack(c.data).action == "cancel_add",
        state=EmployeesSG.CLTests.Add.Date.state
    )
    
    