import re
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext


async def view_service_details(message: types.Message, state: FSMContext):
    """
    View details of a Telegram user by ID
    Usage: /whois <user_id>
    """
    # Extract user_id from command
    command_pattern = r"^\/whois(\d+)$"
    match = re.match(command_pattern, message.text)
    
    if not match:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /whois<user_id>")
        return
    
    user_id = match.group(1)
    
    try:
        # Try to get user info from Telegram
        user_info = await message.bot.get_chat(user_id)
        username = user_info.username
        full_name = user_info.full_name
        
        response = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        response += f"üÜî ID: {user_id}\n"
        response += f"üë§ –ò–º—è: {full_name}\n"
        
        if username:
            response += f"üîó –°—Å—ã–ª–∫–∞: @{username}\n"
            response += f"üåê –ü—Ä–æ—Ñ–∏–ª—å: https://t.me/{username}"
        else:
            response += "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username"
            
        await message.reply(response)
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}\n\n–û—à–∏–±–∫–∞: {str(e)}")


def register_whois_handler(dp: Dispatcher):
    """Register handler for the /whois command"""
    dp.register_message_handler(view_service_details, regexp=r"^\/whois(\d+)$", state="*")
