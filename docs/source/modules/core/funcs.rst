Функции (Funcs)
===============

Вспомогательные функции для работы с основными компонентами приложения.

Функции для работы с приложением
========================================

Утилиты для работы с настройками приложения:

**get_app()** - Получает объект настроек приложения.
  * Загружает настройки из хранилища
  * Возвращает объект `App` с текущими настройками

**get_password()** - Получает пароль приложения.
  * Загружает пароль из хранилища
  * Возвращает пароль

**change_password(text)** - Изменяет пароль приложения.
  * Сохраняет новый пароль в хранилище
  * Возвращает новый пароль


Функции для работы с пользователями
==========================================

Утилиты для управления пользователями бота:

**add_user(id, chat_notify, registration)** - Добавляет нового пользователя.
  * Добавляет пользователя в хранилище
  * Возвращает None

**get_user(message)** - Получает информацию о пользователе.
  * Извлекает ID пользователя из сообщения
  * Запрашивает данные из хранилища
  * Преобразует данные в объект `User`
  * Возвращает объект `User` с данными пользователя

**get_all_to_notify()** - Получает список ID пользователей, готовых к уведомлению.
  * Запрашивает данные из хранилища
  * Фильтрует пользователей, готовых к уведомлению
  * Возвращает список ID пользователей

**save_user(user)** - Сохраняет информацию о пользователе.
  * Извлекает ID пользователя из объекта
  * Удаляет запись из хранилища
  * Добавляет обновленные данные в хранилище
  * Возвращает None

Функции для работы с сотрудниками
========================================

Утилиты для управления данными сотрудников:

**func_get_employees()** - Получает список всех сотрудников.
  * Загружает данные из хранилища
  * Преобразует словари в объекты `Employee`
  * Возвращает список объектов `Employee`

**func_add_employee(name, birthday, registration, workstarted, lmk, id=None)** - Добавляет нового сотрудника.
  * Создает объект `EmployeeBuilder` с переданными параметрами
  * Сохраняет данные в хранилище
  * Возвращает ID нового сотрудника

**func_del_employee(id)** - Удаляет сотрудника по ID.
  * Удаляет запись из хранилища
  * Возвращает True в случае успеха

Функции для проверки дат
==========================

Утилиты для работы с датами:

**date_incorrect(date)** - Проверяет корректность формата даты.
  * Пытается преобразовать строку в объект datetime с форматом ДД.ММ.ГГГГ
  * Возвращает описание ошибки в случае некорректного формата

**is_time_correct(user_time)** - Проверяет корректность формата времени.
  * Пытается преобразовать строку в объект time с форматом ЧЧ:ММ
  * Возвращает описание ошибки в случае некорректного формата

**humanize_date(value)** - Преобразует числовое значение интервала в человекочитаемую строку.
  * Находит ключ в словаре ALLOWED_INTERVALS, соответствующий переданному значению
  * Возвращает строковое представление интервала

Функции для работы с файлами
==================================

Утилиты для работы с файловой системой:

**uniq_name()** - Генерирует уникальное имя файла с текущей датой и временем.
  * Возвращает имя файла в формате `CRT_ДД.ММ.ГГГГ_ЧЧ:ММ:СС`

**В файле path.py определены две константы:**

.. important:: Это пути к директориям для хранения файлов. Если понадобиться изменить структуру хранения, то необходимо изменить эти константы.

.. code-block:: python

  @dataclass(frozen=True)
  class Certificates:
    path = 'storage/certificates/'


  @dataclass(frozen=True)
  class Tmp:
    path = 'storage/tmp/'